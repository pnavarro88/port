import pandas as pd
import matplotlib as plt

portfolio = pd.read_excel('Portfolio.xlsx', 'Pablo', parse_date='Date', index_col='Date')

#create a binary column. 1 = trade is on 0 = no trade on
portfolio['Trade'] = 1
for key in portfolio['In a Trade'].keys():
    if portfolio['In a Trade'][key] == 'Holiday':
        portfolio['Trade'][key] = 0 
    elif portfolio['In a Trade'][key] == 'NO':
        portfolio['Trade'][key] = 0

#TESTING
pd.rolling_sum(portfolio.Trade, 20, min_periods=1).plot()
#pd.rolling_sum(portfolio['Dollar Move'], 20, min_periods=1).plot(secondary_y=True, legend=True)
pd.rolling_sum(portfolio['Percent Move'], 20, min_periods=1).plot(secondary_y=True, legend=True)



trades = ((portfolio['Dollar Move'] != 0) | (portfolio['In a Trade'] == 'YES'))
in_trade = portfolio[trades]
trades = len(portfolio[trades])


STD_PCT = std(in_trade['Percent Move'])
STD_DOLLAR = std(in_trade['Dollar Move'])
p_m = portfolio['Percent Move'].mean()
d_m = portfolio['Dollar Move'].mean()
posp_m = in_trade['Percent Move'].mean()
posd_m = in_trade['Dollar Move'].mean()

pmin = portfolio['Percent Move'].min()
pmax = portfolio['Percent Move'].max()
dmin = portfolio['Dollar Move'].min()
dmax = portfolio['Dollar Move'].max()

winners = portfolio['Dollar Move'] > 0
winners = portfolio[winners]
lossers = portfolio['Dollar Move'] < 0
lossers = portfolio[lossers]

winning_ratio = (len(winners)/float(trades))

#Portfolio value with max drawdown
portfolio['Ending Capital'].plot(title='Portfolio Value with Max Drawdown', legend=True)
portfolio['Max $ Drawdown'].plot(secondary_y=True)

#COMPLETE RESULTS


print 'The percent standard deviation is ' + str('%0.2f' %(STD_PCT * 100))
print ' '
print 'The dollar standard deviation is $' + str('%0.2f' % STD_DOLLAR)
print ' '
print 'The average percent move for all days even if there is not a trade on is ' + str('%0.2f' % (p_m * 100))
print ' '
print 'The average dollar move for all days even if there is not a trade on is $' + str('%0.2f' % d_m )
print ' '
print 'The average percent move for all days even if there is not a trade on is ' + str('%0.2f' % (posp_m * 100))
print ' '
print 'The average dollar move is for days were at least 1 position is open $' + str('%0.2f' % posd_m)
print ' '
print ' '
print 'The best dollar day gain was $' + str('%0.2f' % dmax)
print ' '
print 'The worst dollar day loss was $' + str('%0.2f' % dmin)
print ' '
print 'The best percent day gain was ' + str('%0.2f' % (pmax * 100))
print ' '
print 'The worst percent day loss was ' + str('%0.2f' % (pmin * 100))
print ' '
print ' '
print 'win/loss ratio is ' + str('%0.2f' % winning_ratio)

print 'Returns in percent'
portfolio['Percent Move'].hist(bins=15)

print 'Returns in dollars'
portfolio['Dollar Move'].hist(bins=15)

scatter(portfolio['Ending Capital'], portfolio['Dollar Move'])

#This tells us how much gain per number of days in which a trade is on. The higher the better.
ratio = ((pd.rolling_sum(portfolio['Dollar Move'], 20, min_periods=1))/
         (pd.rolling_sum(portfolio.Trade, 20, min_periods=1)))
ratio.plot(title='Ratio of Dollar gains to Number of trades in a 20 day window')

print 'Description of best percent day gain'
portfolio.ix[portfolio['Percent Move'].idxmax()]

print 'Description of worst percent day'
portfolio.ix[portfolio['Percent Move'].idxmin()]

print 'Description of best dollar day gain'
portfolio.ix[portfolio['Dollar Move'].idxmax()]

print 'Description of worst dollar day'
portfolio.ix[portfolio['Dollar Move'].idxmin()]

#RESULTS divded by win.loss

STD_PCT_win = std(winners['Percent Move'])
STD_DOLLAR_win = std(winners['Dollar Move'])
STD_PCT_loss = std(lossers['Percent Move'])
STD_DOLLAR_loss = std(lossers['Dollar Move'])
wp_m = winners['Percent Move'].mean()
lp_m = lossers['Percent Move'].mean()
wd_m = winners['Dollar Move'].mean()
ld_m = lossers['Dollar Move'].mean()

#WINNERS

print 'The percent standard deviation is ' + str('%0.2f' % (STD_PCT_win * 100))
print 'The dollar standard deviation is $' + str('%0.2f' % STD_DOLLAR_win)
print 'The average percent move is ' + str('%0.2f' % (wp_m*100))
print 'The average dollar move is $' + str('%0.2f' % (wd_m))

winners['Percent Move'].hist()

winners['Dollar Move'].hist()

print 'Value of dollar gains vs. Account size'
scatter(winners['Ending Capital'], winners['Dollar Move'])


#LOSERS
print 'The percent standard deviation is ' + str('%0.2f' % (STD_PCT_loss * 100))
print 'The dollar standard deviation is $' + str('%0.2f' % STD_DOLLAR_loss)
print 'The average percent move is ' + str('%0.2f' % (lp_m*100))
print 'The average dollar move is $' + str('%0.2f' %(ld_m))

lossers['Percent Move'].hist()

lossers['Dollar Move'].hist(bins=15)

print 'Absolute value of dollar losses vs. Account size'
scatter(lossers['Ending Capital'], (-lossers['Dollar Move']))

#PLOTS
PL = pd.rolling_sum(portfolio['Dollar Move'], 20)
PL.plot(title ='20 day rolling P/L')

roll_gains = pd.rolling_sum(winners['Dollar Move'], 20, min_periods=1) 
roll_loses = pd.rolling_sum(lossers['Dollar Move'], 20, min_periods=1)
roll_gains.plot(title='20 day rolling gains and losses')
roll_loses.plot()


#RETURNS by month and day

dollar = portfolio['Dollar Move']
pct.groupby(pct.index.weekday).mean()
month_avg = dollar.groupby(dollar.index.month).mean()
month_min = dollar.groupby(dollar.index.month).min()
month_max = dollar.groupby(dollar.index.month).max()
month_avg.plot(kind='bar')
month_min.plot(style='-*', color='red', secondary_y=True, label=True)
month_max.plot(style='-+', color='green', secondary_y=True,
               label=True, title='Dollar Returns by Month w/ Min & Max')


days_of_week = dollar.groupby(dollar.index.dayofweek).mean()
days_of_week = days_of_week.dropna()
mon_min = dollar.groupby(dollar.index.dayofweek).min()
mon_max = dollar.groupby(dollar.index.dayofweek).max()
days_of_week.plot(kind='bar')
mon_min.plot(style='-*', color='red', secondary_y=True, label=True)
mon_max.plot(style='-+', color='green', secondary_y=True,
               label=True, title='Dollar Returns by Day of week w/ Min & Max')
               
               
#RESTURN BY STD

std_one = (abs(in_trade['Percent Move']) >= abs(STD_PCT)) & (abs(in_trade['Percent Move']) < (STD_PCT * 2))
std_two = (abs(in_trade['Percent Move']) >= (STD_PCT * 2)) & (abs(in_trade['Percent Move']) < (STD_PCT * 3))
std_three = abs(in_trade['Percent Move']) >= (STD_PCT * 3)

one_std = in_trade[std_one]
two_std = in_trade[std_two]
three_std = in_trade[std_three]

scatter(one_std['Ending Capital'], (one_std['Dollar Move']), c='green')
scatter(two_std['Ending Capital'], (two_std['Dollar Move']), c='yellow')
scatter(three_std['Ending Capital'], (three_std['Dollar Move']), c='red')

one_std['Dollar Move'].cumsum().plot(style='-o', title='Cumsum of returns per std')
two_std['Dollar Move'].cumsum().plot(style='-*')
three_std['Dollar Move'].cumsum().plot(style='-s')

one_std['Dollar Move'].cumsum().plot(style='-o', title='Cumsum of returns per std')

std_oned = (abs(in_trade['Dollar Move']) >= abs(STD_DOLLAR)) & (abs(in_trade['Dollar Move']) < (STD_DOLLAR * 2))
std_twod = (abs(in_trade['Dollar Move']) >= (STD_DOLLAR * 2)) & (abs(in_trade['Dollar Move']) < (STD_DOLLAR * 3))
std_threed = abs(in_trade['Dollar Move']) >= (STD_DOLLAR * 3)

one_stdd = in_trade[std_oned]
two_stdd = in_trade[std_twod]
three_stdd = in_trade[std_threed]

scatter(one_stdd['Ending Capital'], (one_stdd['Dollar Move']), color='green')
scatter(two_stdd['Ending Capital'], (two_stdd['Dollar Move']), color='yellow')
scatter(three_stdd['Ending Capital'], (three_stdd['Dollar Move']), color='red',)

one_stdd['Dollar Move'].cumsum().plot(style='-o', title='Cumsum of returns per std')
two_stdd['Dollar Move'].cumsum().plot(style='-*')
three_stdd['Dollar Move'].cumsum().plot(style='-s')

#Next days analysis
future_days = 4 # This is the days looking forward after T. So if you want to have 5 days in total put 4 
for i in range(future_days):
    column_name_short = 'Dollar move ' + str(i+1)
    shift_value_short = -(i+1)
    lossers[column_name_short] = (portfolio['Dollar Move'].shift(shift_value_short))
    
#gets the days in which the trade finished at a S,M,L loss to see what happens T days after. 
small_loss = abs(lossers['Dollar Move']) <= STD_DOLLAR
small_loss = lossers[small_loss]
#median_loss =
#big_loss =
del small_loss['Initial Capital']
del small_loss['Ending Capital']
del small_loss['Percent Move']
del small_loss['In a Trade']
del small_loss['Cash Movements']
del small_loss['Trade']
del small_loss['Peak']
del small_loss['Max $ Drawdown']
del small_loss['Max % Drawdown']
del small_loss['Dollar Move']

# get the averages
#Day_0 = average(small_loss['Dollar Move'])
Day_1 =average(small_loss['Dollar move 1'])
Day_2 =average(small_loss['Dollar move 2'])
Day_3 =average(small_loss['Dollar move 3'])
Day_4 =average(small_loss['Dollar move 4'])


Avg = pd.DataFrame(index=['1'])
#Avg['Avg_1_Day'] = Day_0
Avg['Avg_2_Day'] = Day_1
Avg['Avg_3_Day'] = Day_2
Avg['Avg_4_Day'] = Day_3
Avg['Avg_5_Day'] = Day_4

Avg.plot(kind='bar', title='Average Move T Days After Event')

small_loss.cumsum().plot()

#gets the days in which the trade finished at a S,M,L loss to see what happens T days after. 
medium_loss = abs(lossers['Dollar Move']) <= (STD_DOLLAR * 2)
medium_loss = lossers[medium_loss]

#big_loss =
del medium_loss['Initial Capital']
del medium_loss['Ending Capital']
del medium_loss['Percent Move']
del medium_loss['In a Trade']
del medium_loss['Cash Movements']
del medium_loss['Trade']
del medium_loss['Peak']
del medium_loss['Max $ Drawdown']
del medium_loss['Max % Drawdown']
del medium_loss['Dollar Move']


# get the averages
#Day_0 = average(medium_loss['Dollar Move'])
Day_1 =average(medium_loss['Dollar move 1'])
Day_2 =average(medium_loss['Dollar move 2'])
Day_3 =average(medium_loss['Dollar move 3'])
Day_4 =average(medium_loss['Dollar move 4'])

Avg = pd.DataFrame(index=['1'])
#Avg['Avg_1_Day'] = Day_0
Avg['Avg_2_Day'] = Day_1
Avg['Avg_3_Day'] = Day_2
Avg['Avg_4_Day'] = Day_3
Avg['Avg_5_Day'] = Day_4

Avg.plot(kind='bar', title='Average Move T Days After Event')

medium_loss.cumsum().plot()

#gets the days in which the trade finished at a S,M,L loss to see what happens T days after. 
big_loss = abs(lossers['Dollar Move']) > (STD_DOLLAR * 2)
big_loss = lossers[big_loss]

#big_loss =
del big_loss['Initial Capital']
del big_loss['Ending Capital']
del big_loss['Percent Move']
del big_loss['In a Trade']
del big_loss['Cash Movements']
del big_loss['Trade']
del big_loss['Peak']
del big_loss['Max $ Drawdown']
del big_loss['Max % Drawdown']
del big_loss['Dollar Move']

# get the averages
#Day_0 = average(big_loss['Dollar Move'])
Day_1 =average(big_loss['Dollar move 1'])
Day_2 =average(big_loss['Dollar move 2'])
Day_3 =average(big_loss['Dollar move 3'])
Day_4 =average(big_loss['Dollar move 4'])

Avg = pd.DataFrame(index=['1'])
#Avg['Avg_1_Day'] = Day_0
Avg['Avg_2_Day'] = Day_1
Avg['Avg_3_Day'] = Day_2
Avg['Avg_4_Day'] = Day_3
Avg['Avg_5_Day'] = Day_4

Avg.plot(kind='bar', title='Average Move T Days After Event')

big_loss.cumsum().plot()

#gets the days in which the trade finished at a bigger than $X loss to see what happens T days after. 
dollar_loss = abs(lossers['Dollar Move']) > int(raw_input('Enter the dollar amount to check '))
dollar_loss = lossers[dollar_loss]

#big_loss =
del dollar_loss['Initial Capital']
del dollar_loss['Ending Capital']
del dollar_loss['Percent Move']
del dollar_loss['In a Trade']
del dollar_loss['Cash Movements']
del dollar_loss['Trade']
del dollar_loss['Peak']
del dollar_loss['Max $ Drawdown']
del dollar_loss['Max % Drawdown']
del dollar_loss['Dollar Move']

# get the averages
#Day_0 = average(big_loss['Dollar Move'])
Day_1 =average(dollar_loss['Dollar move 1'])
Day_2 =average(dollar_loss['Dollar move 2'])
Day_3 =average(dollar_loss['Dollar move 3'])
Day_4 =average(dollar_loss['Dollar move 4'])

Avg = pd.DataFrame(index=['1'])
#Avg['Avg_1_Day'] = Day_0
Avg['Avg_2_Day'] = Day_1
Avg['Avg_3_Day'] = Day_2
Avg['Avg_4_Day'] = Day_3
Avg['Avg_5_Day'] = Day_4

Avg.plot(kind='bar', title='Average Move T Days After Event')

dollar_loss.cumsum().plot()

portfolio['Dollar Move'].cumsum().plot()
one_std['Dollar Move'].cumsum().plot(style='--', title='Cumsum of returns for +/- 1 std (from % rets)', legend=True)

